/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectoalojamento;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.*;
import java.awt.event.*;

/**
 *
 * @author Gustavo Vieira
 */
public class Application extends javax.swing.JFrame {

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
        
        JFrame j = new JFrame();
        j.setSize(400,400);
        
        // Mete a janela a abrir no meio do ecrã
        // this.setLocationRelativeTo(null);
        
        // Mesma coisa maneira diferente ?
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension dim = tk.getScreenSize();
        
        int xPos = (dim.width / 2) - (j.getWidth() / 2);
        int yPos = (dim.height / 2) - (j.getHeight() / 2);
        
        j.setLocation(xPos, yPos);
        
        // Não deixa mudar o tamanho da janela com o rato
        j.setResizable(false);
        
        // Fecha a aplicação ao clicar no X
        j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        j.setTitle("My First Frame");
        
        JPanel thePanel = new JPanel();
        
        JLabel label1 = new JLabel("Tell me something");
        
        label1.setText("New Text");
        label1.setToolTipText("Doesn't do anything");
        
        thePanel.add(label1);
        
        JButton button1 = new JButton("Send");
        //button1.setBorderPainted(false);
        //button1.setContentAreaFilled(false);
        button1.setText("New Button");
        button1.setToolTipText("It's a button");
        
        thePanel.add(button1);
        
        JTextField textField1 = new JTextField("Type here", 15);
        // Tamanho caracteres acho eu
        textField1.setColumns(10);
        textField1.setText("Type again");
        textField1.setToolTipText("It's a field");
        thePanel.add(textField1);
        
        JTextArea textArea1 = new JTextArea(15,20);
        textArea1.setText("Just a whole bunch of text that is important\n");
        // Ao chegar ao fim da linha passa pa baixo
        textArea1.setLineWrap(true);
        // Não parte as palavras com a cena de cima
        textArea1.setWrapStyleWord(true);
        
        // Conta o número de linhas NOVAS
        int nLines = textArea1.getLineCount();
        textArea1.append(" number of lines: " + nLines);
        
        // Barra scroll po texto quando precisar
        JScrollPane scrollbar1 = new JScrollPane(textArea1, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        thePanel.add(scrollbar1);
        
        button1.setText("Click Here");
        j.setTitle("My Second Frame");
        textField1.setText("Type Here");
        
        //ListenForButton lForButton = new ListenForButton();
        //button1.addActionListener(lForButton);
        
        j.add(button1);
        
        //ListenForKeys lForKeys = new ListenForKeys();
        //textField1.addKeyListener(lForKeys);
        
        textArea1.setText("Tracking Events\n");
        j.add(thePanel);
        
        //ListenForWindow lForWindow = new ListenForWindow();
        //j.addWindowListener(lForWindow);
        
        j.setVisible(true);
        
        // Começa logo com o focus (escreves sem precisar clicar basicamente po caso do textfield)
        //textField1.requestFocus();
        
        //ListenForMouse lForMouse = new ListenForMouse();
        //thePanel.addMouseListener(lForMouse);
    }

    /*
    private class ListenForMouse implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
            textArea1.append("Mouse Panel pos: " + e.getX() + " " + e.getY() + "\n");
            textArea1.append("Mouse Screen pos: " + e.getXOnScreen() + " " + e.getYOnScreen() + "\n");
            textArea1.append("Mouse Button: " + e.getButton() + "\n");
            textArea1.append("Mouse Clicks: " + e.getClickCount() + "\n");
        }

        @Override
        public void mousePressed(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseExited(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }*/
    /*
    private class ListenForWindow implements WindowListener {

        @Override
        public void windowOpened(WindowEvent e) {
            textArea1.append("Window is active");
        }

        @Override
        public void windowClosing(WindowEvent e) {
            
        }

        @Override
        public void windowClosed(WindowEvent e) {
            
        }

        @Override
        public void windowIconified(WindowEvent e) {
            
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
            
        }

        @Override
        public void windowActivated(WindowEvent e) {
            
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
            
        }
        
    }*/
    
    /*
    private class ListenForKeys implements KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
            textArea1.append("Key Hit:" + e.getKeyChar() + "\n");
        }

        @Override
        public void keyPressed(KeyEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void keyReleased(KeyEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }*/
    // Se desse variaveis globais
    /*
    private class ListenForButton implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if(e.getSource() == button1) {
                buttonClicked++;
                textArea1.append("Button clicked " + buttonClicked + " times\n");
                e.getSource().toString();
            }
        }
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
